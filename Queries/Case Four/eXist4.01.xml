(:- Query 4.01 eXist-db :)

declare namespace functx = "http://www.functx.com";

(: functx function to remove trailing and leading whitespace :)
declare function functx:trim
  ( $arg as xs:string? )  as xs:string {
   replace(replace($arg,'\s+$',''),'^\s+','')
 } ;
 
(: Function to filter out documents by when the author was alive :)
declare function local:filter_using_catalogue( $start_date as xs:string, $end_date as xs:string )
{
 for $writer  in doc("/db/TEST/catalogue/catalogue.xml")//person

 	let $birth := local:process_date($writer/@birth)
 	let $death := local:process_date($writer/@death)
 	let $id := xs:string($writer/@person_id)
 
  	where (xs:date($birth) ge xs:date($start_date)  and xs:date($birth) le xs:date($end_date))
  	or (xs:date($death) ge xs:date($start_date)  and xs:date($death) le xs:date($end_date))
	or (xs:date($birth) le xs:date($start_date)  and xs:date($death) ge xs:date($end_date)) 
  	order by $id
  	return $id
};

(: Function to reformat Orlando dates to YYYY-MM-DD
 Will set month to 01 and day to 01 if unavailable:)
declare function local:process_date($string_date as xs:string) {
 let $date := tokenize(functx:trim($string_date), "[-]")
 let $exclude := ("")
 let $date := distinct-values($date[not(.=$exclude)])

 return 
 if (count($date) = 3) then (
	string-join($date, '-')  
 ) else ( if (count($date) = 2) then (
 	concat(string-join($date, '-'), "-01")
 	) else (if (count($date) = 1) then ( 
 		concat($date, "-01-01")
 		) else (
 		)
 		)
 		)
};

(: Set query variables :)
let $occupation := "artist"
let $place := "Middlesex"
let $start_date := "1832-06-07"
let $end_date := "1901-01-22"

(: Get query results :)
let $region := for $id in local:filter_using_catalogue($start_date, $end_date)
        
        return
        	let $bio_uri := concat("/db/TEST/biography/", $id, "-b.xml")
          for $hit in  doc($bio_uri)//REGION[@REG = "Middlesex"] 
          return $hit/(ancestor::BIOGRAPHY)

let $occupation := for $id in local:filter_using_catalogue($start_date, $end_date)       
        return
        	let $bio_uri := concat("/db/TEST/biography/", $id, "-b.xml")
          for $hit in  doc($bio_uri)//OCCUPATION[ft:query(.,  $occupation)] 
          |doc($bio_uri)//OCCUPATION//SIGNIFICANTACTIVITY[@REG = $occupation]
          |doc($bio_uri)//OCCUPATION//JOB[@REG = $occupation]
			return $hit/(ancestor::BIOGRAPHY)

return $region intersect $occupation